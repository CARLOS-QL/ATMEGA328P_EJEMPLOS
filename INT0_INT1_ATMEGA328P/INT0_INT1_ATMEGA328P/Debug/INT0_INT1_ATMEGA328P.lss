
INT0_INT1_ATMEGA328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000692  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000610  00000000  00000000  00000866  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000233  00000000  00000000  00000e76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  000010ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000359  00000000  00000000  000010f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  0000144d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001496  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_1>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_1>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  78:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_1>:
 */ 

#include <avr/io.h>
#include <avr/interrupt.h>

ISR(INT0_vect){
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	8f 93       	push	r24
  8c:	9f 93       	push	r25
	
	PORTC ^= (1<<0);		//cAMBIA DE ESTADO
  8e:	98 b1       	in	r25, 0x08	; 8
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	89 27       	eor	r24, r25
  94:	88 b9       	out	0x08, r24	; 8
}
  96:	9f 91       	pop	r25
  98:	8f 91       	pop	r24
  9a:	0f 90       	pop	r0
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	0f 90       	pop	r0
  a0:	1f 90       	pop	r1
  a2:	18 95       	reti

000000a4 <main>:
ISR(INT1_vect, ISR_ALIASOF(INT0_vect));

int main(void)
{
	
	DDRC |= (1<<0);			//PC0 como salida
  a4:	87 b1       	in	r24, 0x07	; 7
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1<<0);		//PC0 inicia en 0
  aa:	88 b1       	in	r24, 0x08	; 8
  ac:	8e 7f       	andi	r24, 0xFE	; 254
  ae:	88 b9       	out	0x08, r24	; 8
	
	DDRC |= (1<<1);			//PC0 como salida
  b0:	87 b1       	in	r24, 0x07	; 7
  b2:	82 60       	ori	r24, 0x02	; 2
  b4:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1<<1);		//PC0 inicia en 0
  b6:	88 b1       	in	r24, 0x08	; 8
  b8:	8d 7f       	andi	r24, 0xFD	; 253
  ba:	88 b9       	out	0x08, r24	; 8
	
	DDRD &= ~(1<<2);		//PD2 como entrada
  bc:	8a b1       	in	r24, 0x0a	; 10
  be:	8b 7f       	andi	r24, 0xFB	; 251
  c0:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<< 2);		//PD2 con pull up
  c2:	8b b1       	in	r24, 0x0b	; 11
  c4:	84 60       	ori	r24, 0x04	; 4
  c6:	8b b9       	out	0x0b, r24	; 11
	
	DDRD &= ~(1<<3);		//PD2 como entrada
  c8:	8a b1       	in	r24, 0x0a	; 10
  ca:	87 7f       	andi	r24, 0xF7	; 247
  cc:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<< 3);		//PD2 con pull up
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	88 60       	ori	r24, 0x08	; 8
  d2:	8b b9       	out	0x0b, r24	; 11
	
	
	EICRA = 0b00001010;		//Interrupción externa por flanco de bajada en INT0
  d4:	8a e0       	ldi	r24, 0x0A	; 10
  d6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = 0b00000011;		//Habilita interrupción externa INT0
  da:	83 e0       	ldi	r24, 0x03	; 3
  dc:	8d bb       	out	0x1d, r24	; 29
	EIFR = 0b00000000;		//SU BIT 0 A 0 PARA DETECTAR LAS INTERUPCIONES
  de:	1c ba       	out	0x1c, r1	; 28
	sei();
  e0:	78 94       	sei
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <main+0x3e>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
